#!/usr/bin/env python
import pandas as pd
import argparse
import logging
import re

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] - %(message)s")

def parse_description(row):
    """
    Intelligently parses the Functional_Description column to extract the
    most useful biological information.
    """
    description = row['Functional_Description']
    
    protein_name = description
    gene_name = '-'
    organism = '-'

    # Pattern for Swiss-Prot/TrEMBL (e.g., sp|Q9M1Y3|... Description OS=... GN=...)
    sp_tr_match = re.search(r'^(sp|tr)\|[A-Z0-9]+\|[\w\d_]+\s(.*?)\sOS=(.*?)\sOX=', description)
    if sp_tr_match:
        protein_name = sp_tr_match.group(2).strip()
        organism = sp_tr_match.group(3).strip()
        
        # Extract Gene Name if it exists
        gn_match = re.search(r'GN=([\w\d-]+)', description)
        if gn_match:
            gene_name = gn_match.group(1)
        return protein_name, gene_name, organism

    # Pattern for UniRef (e.g., UniRef90_... Description n=... Tax=...)
    uniref_match = re.search(r'^UniRef\d+_\w+\s(.*?)\sn=\d+\sTax=(.*?)\sTaxID=', description)
    if uniref_match:
        protein_name = uniref_match.group(1).strip()
        organism = uniref_match.group(2).strip()
        return protein_name, gene_name, organism
        
    # If no specific pattern matches (e.g., for Rfam or others), return the original description
    return protein_name, gene_name, organism


def main(args):
    logging.info(f"Reading the final annotation file: {args.input_file}")
    try:
        df = pd.read_csv(args.input_file, sep='\t')
    except FileNotFoundError:
        logging.error(f"ERROR: Input file not found at {args.input_file}")
        return

    logging.info("Parsing descriptions to extract clean Protein Name, Gene Name, and Organism...")
    
    # Apply the parsing function to each row
    parsed_data = df.apply(parse_description, axis=1, result_type='expand')
    df[['Protein_Name', 'Gene_Name', 'Organism']] = parsed_data

    logging.info("Creating final cleaned report...")

    # Define the columns for the final, clean output file
    final_columns = [
        'Transcript_ID',
        'Protein_Name',
        'Gene_Name',
        'Organism',
        'Best_Annotation_Source',
        'Functional_Description', # Keep original for reference
        'InterPro_Hits',
        'Final_GO_Terms',
        'COG_category',
        'KEGG_ko',
        'KEGG_Pathway'
    ]
    
    # Reorder the DataFrame and keep only the selected columns
    final_df = df[final_columns]

    logging.info(f"Writing cleaned annotation table to: {args.output_file}")
    final_df.to_csv(args.output_file, sep='\t', index=False, na_rep='-')
    logging.info("Done!")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Clean and reformat the final annotation report from the Gene Annotator Pro pipeline.")
    parser.add_argument('-i', '--input_file', required=True, help='The final_annotations.tsv file generated by the pipeline.')
    parser.add_argument('-o', '--output_file', required=True, help='Name of the final cleaned TSV output file.')
    
    args = parser.parse_args()
    main(args)
